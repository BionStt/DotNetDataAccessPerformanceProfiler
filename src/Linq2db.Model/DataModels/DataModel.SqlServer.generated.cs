//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

using LinqToDB;
using LinqToDB.DataProvider.SqlServer;
using LinqToDB.Mapping;

namespace DataModels
{
	/// <summary>
	/// Database       : TestPerformaceDB
	/// Data Source    : localhost
	/// Server Version : 11.00.2100
	/// </summary>
	public partial class TestPerformaceDBDB : LinqToDB.Data.DataConnection
	{
		public ITable<Category> Categories { get { return this.GetTable<Category>(); } }
		public ITable<Customer> Customers  { get { return this.GetTable<Customer>(); } }
		public ITable<Product>  Products   { get { return this.GetTable<Product>(); } }

		public TestPerformaceDBDB()
		{
			InitDataContext();
		}

		public TestPerformaceDBDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		#region FreeTextTable

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				field,
				text);
		}

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				fieldSelector,
				text);
		}

		#endregion
	}

	[Table(Schema="dbo", Name="Categories")]
	public partial class Category
	{
		[PrimaryKey, Identity] public int    CategoryID   { get; set; } // int
		[Column,     Nullable] public string CategoryName { get; set; } // nvarchar(15)
		[Column,     Nullable] public string Description  { get; set; } // ntext
		[Column,     Nullable] public byte[] Picture      { get; set; } // image

		#region Associations

		/// <summary>
		/// FK_Products_Categories_BackReference
		/// </summary>
		[Association(ThisKey="CategoryID", OtherKey="CategoryID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Product> Products { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="Customers")]
	public partial class Customer
	{
		[PrimaryKey, NotNull    ] public string CustomerID   { get; set; } // nchar(5)
		[Column,        Nullable] public string CompanyName  { get; set; } // nvarchar(40)
		[Column,        Nullable] public string ContactName  { get; set; } // nvarchar(30)
		[Column,        Nullable] public string ContactTitle { get; set; } // nvarchar(30)
		[Column,        Nullable] public string Address      { get; set; } // nvarchar(60)
		[Column,        Nullable] public string City         { get; set; } // nvarchar(15)
		[Column,        Nullable] public string Region       { get; set; } // nvarchar(15)
		[Column,        Nullable] public string PostalCode   { get; set; } // nvarchar(10)
		[Column,        Nullable] public string Country      { get; set; } // nvarchar(15)
		[Column,        Nullable] public string Phone        { get; set; } // nvarchar(24)
		[Column,        Nullable] public string Fax          { get; set; } // nvarchar(24)
	}

	[Table(Schema="dbo", Name="Products")]
	public partial class Product
	{
		[PrimaryKey, Identity] public int      ProductID       { get; set; } // int
		[Column,     Nullable] public string   ProductName     { get; set; } // nvarchar(40)
		[Column,     Nullable] public int?     SupplierID      { get; set; } // int
		[Column,     Nullable] public int?     CategoryID      { get; set; } // int
		[Column,     Nullable] public string   QuantityPerUnit { get; set; } // nvarchar(20)
		[Column,     Nullable] public decimal? UnitPrice       { get; set; } // decimal(18, 0)
		[Column,     Nullable] public short?   UnitsInStock    { get; set; } // smallint
		[Column,     Nullable] public short?   UnitsOnOrder    { get; set; } // smallint
		[Column,     Nullable] public short?   ReorderLevel    { get; set; } // smallint
		[Column,     Nullable] public bool?    Discontinued    { get; set; } // bit

		#region Associations

		/// <summary>
		/// FK_Products_Categories
		/// </summary>
		[Association(ThisKey="CategoryID", OtherKey="CategoryID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Products_Categories", BackReferenceName="Products")]
		public Category Category { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Category Find(this ITable<Category> table, int CategoryID)
		{
			return table.FirstOrDefault(t =>
				t.CategoryID == CategoryID);
		}

		public static Customer Find(this ITable<Customer> table, string CustomerID)
		{
			return table.FirstOrDefault(t =>
				t.CustomerID == CustomerID);
		}

		public static Product Find(this ITable<Product> table, int ProductID)
		{
			return table.FirstOrDefault(t =>
				t.ProductID == ProductID);
		}
	}
}
